{"version":3,"sources":["flex/basis_shrink_grow.cljs"],"mappings":";AAKA,qCAAA,rCAAMA,kFAAaC,WAAWC;AAA9B,AAAA,0FAAA,4FAAA,2CAAA,+HAAA,uDAAA,2CAAA,iEAAA,yDAAA,oFAAA,IAAA,sEAAA,IAAA,uDAAA,aAAA,zpBACMC,8IAAqB,4CAAA,AAAAC,gBAAMH,uhBAKGC;;AAEpC,2CAAA,3CAAMG,8FAAmBC,MAAMC,IAAIC;AAAnC,AACE,kBAAKC;AAAL,AACE,GAAU,SAAA,RAAMA;AAAhB;;AAAA,AACE,IAAMC,cAAY,cAAA,dAACC,SAAYF;AAA/B,AACE,8BAAA,vBAACG,0GAAaN,MAAMC,IAAI,EAAA,AAAAM,cAAQ,AAACC,MAASJ,eAAaA,YAAYF;;;;AAE3E,oCAAA,pCAAMO,gFAAYC,MAAMT;AAAxB,AACE,IAAMU,kBAAgB,sDAAA,mFAAA,zIAACC,qNAAiCX;IAClDY,mBAAiB,sDAAA,mFAAA,zIAACD,uNAAkCX;IACpDa,iBAAe,sDAAA,mFAAA,zIAACF,oNAAgCX;AAFtD,AAAA,2FAAA,uFAAA,2CAAA,uDAAA,2CAAA,sDAAA,IAAA,wEAAA,yDAAA,mEAAA,yEAAA,mFAAA,uFAAA,2CAAA,uDAAA,2CAAA,sEAAA,IAAA,kFAAA,sEAAA,IAAA,2DAAA,oBAAA,mFAAA,uFAAA,2CAAA,uDAAA,2CAAA,uDAAA,uDAAA,iEAAA,yDAAA,+DAAA,qBAAA,sBAAA,mFAAA,uFAAA,yMAAA,mFAAA,uFAAA,yMAAA,mFAAA,uFAAA,joFAGMc,8nBAGCA,2UACmCL,iSAGlCM,yoBAIDA,4DACJ,AAACtB,mCAAYiB,gBACA,yCAAA,gFAAA,zHAACZ,qHAAqCE,+IAE/Ce,6DACJ,AAACtB,mCAAYmB,iBACA,yCAAA,iFAAA,1HAACd,sHAAsCE,4IAEhDe,2DACJ,AAACtB,mCAAYoB,eACA,yCAAA,8EAAA,vHAACf,mHAAoCE;;AAEvD,6BAAA,7BAAMgB,kEAAKP,MAAMT;AAAjB,AACE,IAAMU,kBAAgB,sDAAA,mFAAA,zIAACC,qNAAiCX;IAClDY,mBAAiB,sDAAA,mFAAA,zIAACD,uNAAkCX;IACpDa,iBAAe,sDAAA,mFAAA,zIAACF,oNAAgCX;AAFtD,AAAA,0FAAA,uFAAA,2CAAA,uDAAA,KAAA,yDAAA,KAAA,sDAAA,IAAA,kFAAA,gEAAA,AAAAH,iCAAA,mEAAA,AAAAA,kCAAA,+DAAA,AAAAA,9lBAGMiB,mVAG2BL,sFACLC,oGACCE,iGACFC;;AAE7B,2CAAA,3CAAMI;AAAN,AAAA,0FAAA,uFAAA,2CAAA,sFAAA,mFAAA,uFAAA,2CAAA,sDAAA,IAAA,gFAAA,KAAA,wEAAA,mDAAA,uEAAA,8hBAAA,mFAAA,uFAAA,2CAAA,sDAAA,IAAA,wEAAA,mDAAA,4EAAA,nsDACMH,0IAAgBI,iKACfJ,mfAIH,kCAAA,+DAAA,jGAACN,wJACD,kCAAA,4DAAA,9FAACA,qJACD,kCAAA,+DAAA,jGAACA,oSACEM,4ZAGH,2BAAA,+DAAA,1FAACE,iJACD,2BAAA,4DAAA,vFAACA,8IACD,2BAAA,+DAAA,1FAACA","names":["flex.basis-shrink-grow/input-field","value-subs","on-change-text","js/shadow.js.shim.module$react_native.TextInput","cljs.core/deref","flex.basis-shrink-grow/input-text-parser","event","key","on-nil","text","int-parsing","js/parseInt","re-frame.core/dispatch","cljs.core/not","js/isNaN","flex.basis-shrink-grow/box-layout","color","flex-basis-subs","re_frame.core.subscribe","flex-shrink-subs","flex-grow-subs","js/shadow.js.shim.module$react_native.View","js/shadow.js.shim.module$react_native.Text","flex.basis-shrink-grow/box","flex.basis-shrink-grow/basis-grow-shrink","utilities/screen-style"],"sourcesContent":["(ns flex.basis-shrink-grow\n  (:require [\"react-native\" :as rn]\n            [re-frame.core :as rf]\n            [utilities :refer [screen-style]]))\n\n(defn input-field [value-subs on-change-text]\n  [:> rn/TextInput {:value (str @value-subs)\n                    :style {:text-align :center\n                            :border-bottom-width 1\n                            :margin-bottom 8\n                            :width 50}\n                    :on-change-text on-change-text}])\n\n(defn input-text-parser [event key on-nil]\n  (fn [text]\n    (when-not (nil? text)\n      (let [int-parsing (js/parseInt text 10)]\n        (rf/dispatch [event key (if-not (js/isNaN int-parsing) int-parsing on-nil)])))))\n\n(defn box-layout [color key]\n  (let [flex-basis-subs (rf/subscribe [:db/get-flex-basis key])\n        flex-shrink-subs (rf/subscribe [:db/get-flex-shrink key])\n        flex-grow-subs (rf/subscribe [:db/get-flex-grow key])]\n    [:> rn/View {:style {:flex 1\n                         :flex-direction :column\n                         :align-items :center}}\n     [:> rn/View {:style {:border-radius 8\n                          :background-color color\n                          :margin-bottom 8\n                          :padding 8}}\n      [:> rn/Text {:style {:color :white\n                           :text-align :center\n                           :min-width 80}} \"Box\"]]\n\n     [:> rn/Text \"flexBasis\"]\n     (input-field flex-basis-subs\n                  (input-text-parser :db/set-flex-basis key \"auto\"))\n\n     [:> rn/Text \"flexShrink\"]\n     (input-field flex-shrink-subs\n                  (input-text-parser :db/set-flex-shrink key 0))\n\n     [:> rn/Text \"flexGrow\"]\n     (input-field flex-grow-subs\n                  (input-text-parser :db/set-flex-grow key 0))]))\n\n(defn box [color key]\n  (let [flex-basis-subs (rf/subscribe [:db/get-flex-basis key])\n        flex-shrink-subs (rf/subscribe [:db/get-flex-shrink key])\n        flex-grow-subs (rf/subscribe [:db/get-flex-grow key])]\n    [:> rn/View {:width 50\n                 :height 50\n                 :flex 1\n                 :background-color color\n                 :flex-basis @flex-basis-subs\n                 :flex-shrink @flex-shrink-subs\n                 :flex-grow @flex-grow-subs}]))\n\n(defn basis-grow-shrink []\n  [:> rn/View {:style screen-style}\n   [:> rn/View {:flex 1\n                :padding-horizontal 10\n                :flex-direction :row\n                :align-content :space-between}\n    (box-layout :powderblue :box-1)\n    (box-layout :skyblue :box-2)\n    (box-layout :steelblue :box-3)]\n   [:> rn/View {:flex 1\n                :flex-direction :row\n                :background-color :aliceblue}\n    (box :powderblue :box-1)\n    (box :skyblue :box-2)\n    (box :steelblue :box-3)]])"]}