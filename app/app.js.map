{"version":3,"sources":["app.cljs"],"mappings":"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","names":["app/home","props","js/shadow.js.shim.module$react_native.View","utilities/screen-style","utilities/header-menu","dest","app/flex","app/counter","with-let18633","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__16352__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init18634","cljs.core/not","res18635","count","re_frame.core.subscribe","js/shadow.js.shim.module$react_native.Text","cljs.core/deref","js/shadow.js.shim.module$react_native.Button","re-frame.core/dispatch","app/nav-graph","with-let18636","init18637","res18638","nav-state","get-nav-state","temp__5804__auto__","state","save-state","add-listener","ref","nav-ref","js/shadow.js.shim.module$$react_navigation$native.NavigationContainer","utilities/Stack","utilities/screen","cljs.core.map","p__18639","vec__18640","cljs.core.nth","name","component","_","flex.layout-direction/layout-direction","flex.justify-content/justify-content","flex.align-items/align-items","flex.align-self/align-self","flex.align-content/align-content","flex.flex-wrap/flex-wrap","flex.basis-shrink-grow/basis-grow-shrink","flex.row-column-gap/row-column-gap","flex.width-height/width-height","app/start","root/expo-root","reagent.core.as_element","app/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns app\n  (:require [\"react-native\" :as rn]\n            [re-frame.core :as rf]\n            [reagent.core :as r]\n            [root :as expo-root]\n            [db :as db]\n            [utilities :as ut :refer [screen Stack]]\n            [flex.basis-shrink-grow :refer [basis-grow-shrink]]\n            [flex.layout-direction :refer [layout-direction]]\n            [flex.justify-content :refer [justify-content]]\n            [flex.align-items :refer [align-items]]\n            [flex.align-self :refer [align-self]]\n            [flex.align-content :refer [align-content]]\n            [flex.flex-wrap :refer [flex-wrap]]\n            [flex.row-column-gap :refer [row-column-gap]]\n            [flex.width-height :refer [width-height]]\n            [\"@react-navigation/native\" :as nn]))\n\n(defn home [props]\n  [:> rn/View {:style ut/screen-style}\n\n   (ut/header-menu :nothing [\"Flex\" \"Counter\"] (fn [dest] (-> props .-navigation (.navigate dest))))])\n\n(defn flex [^js props]\n  [:> rn/View {:style {:flex 1\n                       :padding 10\n                       :background-color :white}}\n\n   (ut/header-menu :nothing [\"LayoutDirection\" \"JustifyContent\"\n                             \"AlignItems\" \"AlignSelf\" \"AlignContent\"\n                             \"FlexWrap\" \"FlexBasisShrinkGrow\" \"RowColumnGap\"\n                             \"WidthHeight\"]\n                (fn [dest] (-> props .-navigation (.navigate dest))))])\n\n(defn counter []\n  (r/with-let [count (rf/subscribe [::db/get-count])]\n    [:> rn/View {:style {:flex 1\n                         :justify-content :center}}\n     [:> rn/Text {:style {:font-size 33\n                          :color :blue}}\n      (str \"Hello World\" @count)]\n     [:> rn/Button {:title \"Click me\"\n                    :on-press (fn [] (rf/dispatch [::db/increment]))}]]))\n\n\n\n(defn nav-graph []\n  (r/with-let [nav-state (rf/subscribe [::db/get-nav-state])\n               get-nav-state (fn [] (when-let [state @nav-state] (-> state .-data .-state)))\n               save-state (fn [state] (rf/dispatch [::db/save-nav-state state]))\n\n               add-listener (fn [ref] (.addListener ref \"state\" save-state))\n               nav-ref (fn [ref] (when ref (add-listener ref)))]\n    [:> nn/NavigationContainer {:ref nav-ref\n                                :initial-state (get-nav-state)}\n     [:> Stack.Navigator\n      (screen \"Home\" (fn [props] [home props]))\n      (screen \"Flex\" (fn [props] [flex props]))\n\n      (map (fn [[name component]] (screen name (fn [_] [component])))\n           [[\"Counter\" counter]\n            [\"LayoutDirection\" layout-direction]\n            [\"JustifyContent\" justify-content]\n            [\"AlignItems\" align-items]\n            [\"AlignSelf\" align-self]\n            [\"AlignContent\" align-content]\n            [\"FlexWrap\" flex-wrap]\n            [\"FlexBasisShrinkGrow\" basis-grow-shrink]\n            [\"RowColumnGap\" row-column-gap]\n            [\"WidthHeight\" width-height]])]]))\n\n(defn start\n  {:dev/after-load true}\n  []\n  (expo-root/expo-root (r/as-element [nav-graph])))\n\n(defn init []\n  (rf/dispatch-sync [::db/init-db])\n  (start))"]}