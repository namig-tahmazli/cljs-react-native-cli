{"version":3,"sources":["utilities.cljs"],"mappings":"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","names":["js/utilities","js/utilities.screen-style","utilities/screen-style","js/utilities.Stack","utilities/Stack","js/shadow.js.shim.module$$react_navigation$native_stack.createNativeStackNavigator","p1__16145#","utilities/screen","name","component-fn","reagent.core.as_element","utilities/header-menu","selected-option","options","select-option","js/shadow.js.shim.module$react_native.View","cljs.core.map","option","option-as-key","cljs.core.keyword","is-selected-option?","cljs.core._EQ_","js/shadow.js.shim.module$react_native.TouchableOpacity","js/shadow.js.shim.module$react_native.Text","utilities/header-title","title","var_args","G__16149","utilities/container","js/Error","style","children","given-style","new-style","cljs.core.into","utilities.container","G__16151","utilities/build-demo-children","add-style","colors","color","utilities.build_demo_children","_"],"sourcesContent":["(ns utilities\n  (:require [\"react-native\" :as rn]\n            [reagent.core :as r]\n            [\"@react-navigation/native-stack\" :as nns]))\n\n(defonce screen-style {:flex 1\n                       :padding 10\n                       :background-color :white})\n\n(defonce Stack (nns/createNativeStackNavigator))\n\n(defn screen [name component-fn]\n  [:> Stack.Screen {:name name\n                    :key name\n                    :component #(r/as-element (component-fn %))}])\n\n(defn header-menu [selected-option options select-option]\n  [:> rn/View {:style {:flex-direction :row\n                       :flex-wrap :wrap\n                       :margin-top 6}}\n   (map (fn [option]\n          (let [option-as-key (keyword option)\n                is-selected-option? (= option-as-key selected-option)]\n            [:> rn/TouchableOpacity {:style {:min-width \"48%\"\n                                             :margin-horizontal \"1%\"\n                                             :margin-bottom 6\n                                             :padding-horizontal 8\n                                             :padding-vertical 6\n                                             :border-radius 6\n                                             :background-color (if is-selected-option? :coral :oldlace)}\n                                     :key option\n                                     :on-press #(select-option option-as-key)}\n             [:> rn/Text {:style {:color (if is-selected-option? :white :coral)\n                                  :font-size 12\n                                  :font-weight 500}} option]]))\n        options)])\n\n(defn header-title [title]\n  [:> rn/Text {:style {:text-align :center\n                       :color :coral\n                       :font-size 24}} title])\n\n(defn container\n  ([style children] (let [given-style {:flex 1\n                                       :background-color :aliceblue\n                                       :min-height 200\n                                       :margin-top 8}\n                          new-style (into given-style style)]\n                      [:> rn/View {:key :container\n                                   :style new-style}\n                       children]))\n  ([children] (container {} children)))\n\n(defn build-demo-children\n  ([add-style colors] (map (fn [color] [:> rn/View {:style (into {:background-color color\n                                                                  :width 50\n                                                                  :min-width 50\n                                                                  :min-height 50\n                                                                  :height 50}\n                                                                 (add-style color))\n                                                    :key color}])\n                           colors))\n  ([add-style] (build-demo-children add-style [:powderblue :skyblue :steelblue]))\n  ([] (build-demo-children (fn [_] {}))))"]}